{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Data Dump Reconciliation File","provenance":[{"file_id":"1hy_DxlbSoSy1sIPjy27brXVQxMLjG-gm","timestamp":1625665126757},{"file_id":"1dhdimDUyFn5M5POPGtoAgn1omuuf-KNe","timestamp":1624440410474},{"file_id":"1Bjepgl_V71IPdWO4zjFcGEwvlII5X2dN","timestamp":1623311599650}],"collapsed_sections":[]},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","metadata":{"id":"RVfZVM5-by6K"},"source":["# install and import pygsheets\n","!pip install pygsheets\n","import pygsheets\n","\n","#  Import PyDrive and associated libraries.\n","# This only needs to be done once per notebook.\n","from pydrive.auth import GoogleAuth\n","from pydrive.drive import GoogleDrive\n","from google.colab import auth\n","from oauth2client.client import GoogleCredentials\n","\n","# Authenticate and create the PyDrive client.\n","# This only needs to be done once per notebook.\n","auth.authenticate_user()\n","gauth = GoogleAuth()\n","gauth.credentials = GoogleCredentials.get_application_default()\n","drive = GoogleDrive(gauth)\n","\n","# connect google sheets\n","import gspread\n","# import pygsheets\n","gc = gspread.authorize(GoogleCredentials.get_application_default())\n","\n","\n","import json\n","from google.oauth2 import service_account\n","\n","with open('service_account.json') as source:\n","   info = json.load(source)\n","credentials = service_account.Credentials.from_service_account_info(info)\n","\n","client = pygsheets.authorize(service_account_file='service_account.json')\n","\n","\n","# import pandas\n","import pandas as pd\n","from functools import reduce\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"NGdX4ZQacZAY"},"source":["weekFolderID = '1EjFK6sBqh8hB6-A45hIStW2P6hi9sJcW'"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"397mFw4x6n7E"},"source":["Combine Performance File"]},{"cell_type":"code","metadata":{"id":"5x_lqgSD6EZQ","colab":{"base_uri":"https://localhost:8080/","height":447},"executionInfo":{"status":"error","timestamp":1626189229491,"user_tz":-60,"elapsed":4904,"user":{"displayName":"Anuoluwapo Oluwatuyi","photoUrl":"","userId":"17887307264134271546"}},"outputId":"2586d018-113a-4c84-c069-a88ded0b9c25"},"source":["# Append all files in folder into a listframe\n","\n","listframe = []\n","\n","weekFolder = drive.ListFile({'q': \"'\"+weekFolderID+\"' in parents and  mimeType = 'application/vnd.google-apps.folder'\"}).GetList()\n","day = 'Jul 09'\n","\n","for folder in weekFolder:\n","  if folder['title'] == 'Performance':\n","    # https://developers.google.com/drive/v2/web/search-parameters\n","    files = drive.ListFile({'q': \"title contains '\"+day+\"'and not title contains \\\n","                            '(7)' and not title contains '(6)' and '\"+folder['id']+\"' in parents \\\n","                            and mimeType = 'text/csv' and trashed = false \"}).GetList()\n","    for file in files:\n","      # file = drive.CreateFile({'id':file['id']})\n","      # file['title'] = file['title'].replace(\"_Jul_\",\" Jul \") # Change title.\n","      # file.Upload()\n","      print(file['title'])\n","      # download\n","      fileDownloaded = drive.CreateFile({'id':file['id']})\n","\n","      # load\n","      fileDownloaded.GetContentFile('performance.csv')\n","\n","      # read\n","      df = pd.read_csv('performance.csv', delimiter=',' )\n","\n","      # append\n","      listframe.append(df)\n","\n","# combine all files in the list into a dataframe\n","wkperffile = pd.concat(listframe)\n","\n","# convert hour online to just hours\n","wkperffile['Hours online'] = pd.to_timedelta(wkperffile['Hours online']).dt.total_seconds()/3600\n","\n","# convert strings to numerics\n","wkperffile[['Name', 'Net Fares', 'Per trip', 'Per hour online', \\\n","            'Per km on trip']] = pd.to_numeric(wkperffile[['Name', \\\n","                                'Net Fares', 'Per trip', 'Per hour online', 'Per km on trip']], errors='coerce')\n","\n","distancepertrip =wkperffile['Distance per trip'].str.split(\" \",n=0,expand=True)\n","wkperffile['Distance per trip'] = distancepertrip[0].fillna(0)\n","wkperffile['Distance per trip'] = pd.to_numeric(wkperffile['Distance per trip'])\n","\n","acceptancerate =wkperffile['Acceptance rate'].str.split(\"%\",n=0,expand=True)\n","wkperffile['Acceptance rate'] = acceptancerate[0].fillna(0)\n","wkperffile['Acceptance rate'] = pd.to_numeric(wkperffile['Acceptance rate'],errors='coerce')/100\n","\n","cancellationrate =wkperffile['Driver cancellation rate'].str.split(\"%\",n=0,expand=True)\n","wkperffile['Driver cancellation rate'] = cancellationrate[0].fillna(0)\n","wkperffile['Driver cancellation rate'] = pd.to_numeric(wkperffile['Driver cancellation rate'],errors='coerce')/100\n","\n","wkperffile['Ratings'] = pd.to_numeric(wkperffile['Ratings'],errors='coerce')\n","wkperffile['Lifetime rating'] = pd.to_numeric(wkperffile['Lifetime rating'],errors='coerce')\n","\n","\n","# aggregate metrics by names\n","# wkperffile['Name'] = pd.Series(wkperffile['Name']).str.title()\n","# wkperffile = wkperffile.groupby('Name').agg({'Net Fares':'sum', 'Per trip':'mean','Per hour online':'mean', 'Per km on trip':'mean',\\\n","#                                              'Trips':'sum', 'Hours online':'sum', 'Trips per hour':'mean', 'Distance per trip':'mean',\\\n","#                                               'Ratings':'mean','Lifetime rating':'mean','Acceptance rate':'mean','Driver cancellation rate':'mean'}).reset_index()\n","pd.set_option('display.max_columns', 500)\n","print(wkperffile.columns)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["driver_performance Jul 09(1).csv\n","driver_performance Jul 09(4).csv\n","driver_performance Jul 09(3).csv\n","driver_performance Jul 09(2).csv\n","driver_performance Jul 09(5).csv\n"],"name":"stdout"},{"output_type":"error","ename":"TypeError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-99-1ed64059f68a>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     34\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     35\u001b[0m \u001b[0;31m# convert strings to numerics\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 36\u001b[0;31m \u001b[0mwkperffile\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'Name'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'Net Fares'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'Per trip'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'Per hour online'\u001b[0m\u001b[0;34m,\u001b[0m             \u001b[0;34m'Per km on trip'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mto_numeric\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mwkperffile\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'Name'\u001b[0m\u001b[0;34m,\u001b[0m                                 \u001b[0;34m'Net Fares'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'Per trip'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'Per hour online'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'Per km on trip'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0merrors\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'coerce'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     37\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     38\u001b[0m \u001b[0mdistancepertrip\u001b[0m \u001b[0;34m=\u001b[0m\u001b[0mwkperffile\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'Distance per trip'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstr\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msplit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\" \"\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mn\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mexpand\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/core/tools/numeric.py\u001b[0m in \u001b[0;36mto_numeric\u001b[0;34m(arg, errors, downcast)\u001b[0m\n\u001b[1;32m    137\u001b[0m         \u001b[0mvalues\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0marray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0marg\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"O\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    138\u001b[0m     \u001b[0;32melif\u001b[0m \u001b[0mgetattr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0marg\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"ndim\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 139\u001b[0;31m         \u001b[0;32mraise\u001b[0m \u001b[0mTypeError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"arg must be a list, tuple, 1-d array, or Series\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    140\u001b[0m     \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    141\u001b[0m         \u001b[0mvalues\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0marg\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mTypeError\u001b[0m: arg must be a list, tuple, 1-d array, or Series"]}]},{"cell_type":"markdown","metadata":{"id":"0eSrxcOuVd4E"},"source":["Combine Payments file"]},{"cell_type":"code","metadata":{"id":"s_xQ3248Vj0t","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1626185975455,"user_tz":-60,"elapsed":7144,"user":{"displayName":"Anuoluwapo Oluwatuyi","photoUrl":"","userId":"17887307264134271546"}},"outputId":"d6775a35-d007-4276-fe52-321095c5ff65"},"source":["#  Append all files in folder into a listframe\n","paymentslistframe = []\n","\n","for folder in weekFolder:\n","  if folder['title'] == 'Payments':\n","    files = drive.ListFile({'q': \"title contains '\"+day+\"'and not title contains \\\n","                            '(7)' and not title contains '(6)' and '\"+folder['id']+\"' in parents \\\n","                            and mimeType = 'text/csv' and trashed = false \"}).GetList()\n","    for file in files:\n","      # print(file['title'])\n","\n","      # download\n","      fileDownloaded = drive.CreateFile({'id':file['id']})\n","\n","      # load\n","      fileDownloaded.GetContentFile('payments.csv')\n","\n","      # read\n","      df = pd.read_csv('payments.csv', delimiter=',' )\n","\n","      # append\n","      paymentslistframe.append(df)\n","\n","# combine all files in the list into a dataframe\n","combinedPayments = pd.concat(paymentslistframe)\n","\n","# concatenate the names\n","combinedPayments['Name'] = combinedPayments['firstName'] + \" \" + combinedPayments['lastName']\n","\n","# pick only fullname, amount and itemtype\n","paymentsfile = combinedPayments[['driverUUID','Name','amount','itemType']]\n","\n","# get total cash collected\n","# get cash collected itemtype\n","cashCollected = paymentsfile.loc[paymentsfile['itemType'] == 'cash_collected']\n","\n","# sum and count amounts by names to get the cash collected per driver\n","cashCollected['Name'] = pd.Series(cashCollected['Name']).str.title()\n","cashCollected = cashCollected.groupby('Name').agg({'driverUUID':'first','amount':['sum','count']}).reset_index()\n","cashCollected.columns = ['Name','driverUUID', 'cashCollected','cashTrips']\n","\n","print(cashCollected.head(400))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["                            Name                            driverUUID  \\\n","0                 Abayomi Ayinde  f1f25e0a-32be-45ce-ac5d-f05ed1a5298d   \n","1               Abimbola Omojuwa  383e0607-e681-4cd2-bd6f-144a85f5c865   \n","2                Abiodun Adedeji  2271cd97-eded-4336-838a-927d167fe1f5   \n","3                Abiodun Onamosu  2b92c802-42db-4313-afdf-62421bc87f85   \n","4           Abiodun Sunday Adisa  0c033290-9d64-4ac5-9ca3-6ea3828ea3c5   \n","..                           ...                                   ...   \n","295     Wasiu Oluwatoyin Alarape  22ed8e9e-a56c-4580-82fa-4e478b205981   \n","296          Williams Aikhuemero  5dfa62f7-31ab-4bae-8528-e56a943317b5   \n","297  Williams Nwadinobi Anunukem  fa140fd5-34a0-447a-a581-9e897516c4d9   \n","298                 Wisdom Akpan  4739a253-d09f-4c10-9562-2d623195c995   \n","299   Zainab Oluwasefunmi Atuaka  2b46b87b-4154-4308-91c9-7d526e8ca7ee   \n","\n","     cashCollected  cashTrips  \n","0         -13000.0          5  \n","1         -16100.0          8  \n","2         -14300.0          7  \n","3         -12300.0          7  \n","4         -10300.0          6  \n","..             ...        ...  \n","295        -4300.0          2  \n","296       -12200.0          5  \n","297        -7100.0          5  \n","298       -10400.0          7  \n","299       -11300.0          4  \n","\n","[300 rows x 4 columns]\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:36: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n"],"name":"stderr"}]},{"cell_type":"markdown","metadata":{"id":"YVirrrlcb9wY"},"source":["Combine All Drivrs File"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"KZe3jNvKcAhl","executionInfo":{"status":"ok","timestamp":1626185981524,"user_tz":-60,"elapsed":6070,"user":{"displayName":"Anuoluwapo Oluwatuyi","photoUrl":"","userId":"17887307264134271546"}},"outputId":"0a78839b-f55f-46ae-f9a5-dae3bec1a1da"},"source":["#  Append all files in folder into a listframe\n","alldriverslistframe = []\n","\n","for folder in weekFolder:\n","  if folder['title'] == 'All Drivers':\n","    files = drive.ListFile({'q': \"title contains '\"+day+\"'and not title contains '(7)' and not title contains '(6)' and '\"+folder['id']+\"' in parents and mimeType = 'text/csv' and trashed = false \"}).GetList()\n","    for file in files:\n","      # print(file['title'])\n","\n","      # download\n","      fileDownloaded = drive.CreateFile({'id':file['id']})\n","\n","      # load\n","      fileDownloaded.GetContentFile('alldrivers.csv')\n","\n","      # read\n","      df = pd.read_csv('alldrivers.csv', delimiter=',' )\n","\n","      # append\n","      alldriverslistframe.append(df)\n","\n","# combine all files in the list into a dataframe\n","combinedAlldrivers = pd.concat(alldriverslistframe)\n","\n","print(combinedAlldrivers.columns)\n","# concatenate the names\n","# combinedAlldrivers['Name'] = combinedAlldrivers['First Name'] + \" \" + combinedAlldrivers['Last Name']\n","\n","# pick only fullname, uber fees\n","alldriversfile = combinedAlldrivers[['Driver ID','Uber Fee']]\n","\n","# sum uber fees by drivers\n","alldriversfile['Name'] = pd.Series(alldriversfile['Driver ID']).str.title()\n","alldriversfile = alldriversfile.groupby('Driver ID').sum().reset_index()\n","alldriversfile.columns = ['driverUUID', 'Uber Fee']\n","\n","print(alldriversfile.head(400))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Index(['Driver ID', 'First Name', 'Last Name', 'Total', 'Trips', 'Fare',\n","       'Surge', 'Cash collection', 'Uber Fee', 'Wait Time', 'Tip',\n","       'Lagos Airport Surcharge', 'Adjusted Fare', 'Other Promotions', 'Toll'],\n","      dtype='object')\n","                               driverUUID  Uber Fee\n","0    001319fb-c6f6-4849-a062-515e59dc0689  -4955.50\n","1    0073465c-8143-49c6-a37a-4f0b29738c05  -2696.25\n","2    0078ddf7-9f70-4fc1-bf93-80a5114dfbfc  -1267.20\n","3    011bfaae-ef9c-40c4-b49a-5acfc3f5e56c  -5915.75\n","4    01ef8975-0e8c-41a1-982e-f3ded75449a5  -3203.25\n","..                                    ...       ...\n","301  fa140fd5-34a0-447a-a581-9e897516c4d9  -2809.75\n","302  fb2060b2-b6a4-4e59-b411-a6fa2c5623a0  -1689.75\n","303  fb49c327-2bac-4479-8866-fad76b89e207  -7704.25\n","304  fce722ca-e6db-456e-842d-ea22857d4cb1  -3780.25\n","305  fd806920-f9f3-408c-bfe0-fcf1446a4745  -3938.75\n","\n","[306 rows x 2 columns]\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:33: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n"],"name":"stderr"}]},{"cell_type":"markdown","metadata":{"id":"L1gZJNVgSsiz"},"source":["Get Moove Details"]},{"cell_type":"code","metadata":{"id":"BRYafP4ktsv6","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1626185984001,"user_tz":-60,"elapsed":2496,"user":{"displayName":"Anuoluwapo Oluwatuyi","photoUrl":"","userId":"17887307264134271546"}},"outputId":"23bd7111-86e4-441e-c701-a2a0115ec941"},"source":["# get moove details\n","mooveDetailList =[]\n","worksheet = gc.open_by_key('1Q3BJcXwRncZiiB3GAYw1CNN-RWOWjt4AyUHxjs_Kztg').sheet1\n","for i in range(2,5):\n","  columns = worksheet.col_values(i)\n","  mooveDetailList.append(columns[1:])\n","\n","# print(mooveDetailList)\n","\n","# convert list to data frame\n","mooveDetails = pd.DataFrame(mooveDetailList)\n","mooveDetails = mooveDetails.T\n","mooveDetails.columns = ['Name','Product','DRN']\n","mooveDetails['Name'] = pd.Series(mooveDetails['Name']).str.title()\n","print(mooveDetails)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["                                Name         Product        DRN\n","0                       Inwang Ubong  income product  DRN000022\n","1                     Adeola Okusaga  income product  DRN000220\n","2                      Temitope Tayo  income product  DRN000229\n","3                   Chiegeokwu Amaju    flexi rental  DRN000230\n","4               Adanna Cythia Nwanna    flexi rental  DRN000233\n","..                               ...             ...        ...\n","927  Frederick Ossai Onyenweosa Ukor       DTO-II 48  DRN002637\n","928                  Nnamdi Nwaolise       DTO-II 48  DRN002612\n","929                 Adedeji Gansallo       DTO-II 48  DRN002595\n","930        Temitayo Ochevire Okudolo       DTO-II 48  DRN002639\n","931                 Emmanuel Igbokwe       DTO-II 48  DRN002561\n","\n","[932 rows x 3 columns]\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"xvdGWK09OMbE"},"source":["Virtual Accounts Data"]},{"cell_type":"code","metadata":{"id":"MvJ6MFTfSyl3","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1626185985289,"user_tz":-60,"elapsed":1289,"user":{"displayName":"Anuoluwapo Oluwatuyi","photoUrl":"","userId":"17887307264134271546"}},"outputId":"e74b23fb-4677-424e-ae42-d03466bdc2dc"},"source":["fileid = '1DRk8HYz_HPu_K8jzGEQB_N2hu5StgaWo'\n","\n","folder = drive.ListFile({'q': \"'\"+fileid+\"' in parents and mimeType = 'text/csv' and trashed = false \"}).GetList()\n","for file in folder:\n","  # print(file['title'])\n","\n","  # download\n","  fileDownloaded = drive.CreateFile({'id':file['id']})\n","\n","  # load\n","  fileDownloaded.GetContentFile('VirtualAccount.csv')\n","\n","  # read\n","  VirtualAccountDF = pd.read_csv('VirtualAccount.csv', delimiter=',' )\n","\n","# select only drn and amount\n","VirtualAcctDF = VirtualAccountDF[['drn','amount']]\n","\n","# Sum and VA Amount\n","VA = VirtualAcctDF.groupby('drn').agg({'amount':['sum','count']}).reset_index()\n","VA.columns = ['DRN','VAAmount', 'VATrips']\n","\n","print(VA)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["          DRN  VAAmount  VATrips\n","0   DRN000466     14300        6\n","1   DRN000554     15800        7\n","2   DRN000574     16760       23\n","3   DRN000603      1700        1\n","4   DRN000665     24300       10\n","5   DRN000762     10800        6\n","6   DRN000924       700        1\n","7   DRN001060      6868       20\n","8   DRN001086      1600        1\n","9   DRN001093      2100        2\n","10  DRN001112     18700        9\n","11  DRN001186     18900       20\n","12  DRN001274      1700        1\n","13  DRN001312      1300        1\n","14  DRN001482      1400        2\n","15  DRN001511     14900        4\n","16  DRN001534     17900       10\n","17  DRN001623      2000        1\n","18  DRN001649      7700        3\n","19  DRN001751      4400        3\n","20  DRN001778      1400        2\n","21  DRN001875     12000        6\n","22  DRN001957      2300        1\n","23  DRN002005     12050       15\n","24  DRN002089     18800        9\n","25  DRN002172     10300        7\n","26  DRN002283      1200        1\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"RP7bsluCSm1y"},"source":["Combine Performance, Earnings and Moove Details"]},{"cell_type":"code","metadata":{"id":"_kjvfVgVl0JX"},"source":["# join elements of the final payments file\n","dfs = [alldriversfile, cashCollected]\n","\n","# join on driverUUID\n","reconfile = reduce(lambda left,right: pd.merge(left,right,how='left', on='driverUUID'), dfs)\n","\n","# join on Name\n","dfs = [wkperffile, reconfile, mooveDetails]\n","reconfile = reduce(lambda left,right: pd.merge(left,right,how='left', on='Name'), dfs)\n","\n","# join on DRN\n","dfs = [reconfile, VA]\n","reconfile = reduce(lambda left,right: pd.merge(left,right,how='left', on='DRN'), dfs)\n","\n","reconfile = reconfile.fillna(0)\n","\n","reconfile['Date'] = day\n","reconfile['cashCollected'] = -reconfile['cashCollected']\n","reconfile['grossFares'] = reconfile['Net Fares'] - reconfile['Uber Fee']\n","reconfile['grossFT'] = reconfile['grossFares']/reconfile['Trips']\n","reconfile['Distance on Trip'] = reconfile['Distance per trip']*reconfile['Trips']\n","reconfile['tripsAccepted'] = round(reconfile['Trips']/(1-reconfile['Driver cancellation rate']),0)\n","\n","reconfile = reconfile[['Date','Name', 'driverUUID', 'DRN', 'Product', 'grossFares',\n","       'grossFT', 'Net Fares', 'Per trip', 'Per hour online', 'Per km on trip',\n","       'Trips', 'tripsAccepted', 'Hours online', 'Trips per hour', 'Distance per trip', 'Distance on Trip',\n","       'Ratings', 'Lifetime rating', 'Acceptance rate',\n","       'Driver cancellation rate', 'Uber Fee', 'cashCollected',\n","       'cashTrips', 'VAAmount', 'VATrips']]\n","reconfile.drop_duplicates(subset=['Name', 'driverUUID', 'DRN','Trips'],inplace=True)\n","print(reconfile)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"o3cCEe2sS0Rg"},"source":["Write reconciled files into google sheets"]},{"cell_type":"code","metadata":{"id":"GM7scmqQUwuC"},"source":["reconSheet = client.open_by_key('1Q3BJcXwRncZiiB3GAYw1CNN-RWOWjt4AyUHxjs_Kztg') \n","wksalldriversfile = reconSheet.worksheet_by_title(\"dailyData\")\n","lastrow = len(wksalldriversfile.get_values('A1','A10000'))+1\n","\n","wksalldriversfile.set_dataframe(reconfile,(lastrow,1),copy_head=False,nan='')"],"execution_count":null,"outputs":[]}]}